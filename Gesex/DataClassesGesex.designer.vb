'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="bdgesex")>  _
Partial Public Class DataClassesGesexDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertasignatura(instance As asignatura)
    End Sub
  Partial Private Sub Updateasignatura(instance As asignatura)
    End Sub
  Partial Private Sub Deleteasignatura(instance As asignatura)
    End Sub
  Partial Private Sub Insertusuario_hace_examen(instance As usuario_hace_examen)
    End Sub
  Partial Private Sub Updateusuario_hace_examen(instance As usuario_hace_examen)
    End Sub
  Partial Private Sub Deleteusuario_hace_examen(instance As usuario_hace_examen)
    End Sub
  Partial Private Sub Insertexamen(instance As examen)
    End Sub
  Partial Private Sub Updateexamen(instance As examen)
    End Sub
  Partial Private Sub Deleteexamen(instance As examen)
    End Sub
  Partial Private Sub Insertpregunta(instance As pregunta)
    End Sub
  Partial Private Sub Updatepregunta(instance As pregunta)
    End Sub
  Partial Private Sub Deletepregunta(instance As pregunta)
    End Sub
  Partial Private Sub Insertrespuesta(instance As respuesta)
    End Sub
  Partial Private Sub Updaterespuesta(instance As respuesta)
    End Sub
  Partial Private Sub Deleterespuesta(instance As respuesta)
    End Sub
  Partial Private Sub Insertusuario(instance As usuario)
    End Sub
  Partial Private Sub Updateusuario(instance As usuario)
    End Sub
  Partial Private Sub Deleteusuario(instance As usuario)
    End Sub
  Partial Private Sub Insertusuario_cursa_asignatura(instance As usuario_cursa_asignatura)
    End Sub
  Partial Private Sub Updateusuario_cursa_asignatura(instance As usuario_cursa_asignatura)
    End Sub
  Partial Private Sub Deleteusuario_cursa_asignatura(instance As usuario_cursa_asignatura)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("bdgesexConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property asignatura() As System.Data.Linq.Table(Of asignatura)
		Get
			Return Me.GetTable(Of asignatura)
		End Get
	End Property
	
	Public ReadOnly Property usuario_hace_examen() As System.Data.Linq.Table(Of usuario_hace_examen)
		Get
			Return Me.GetTable(Of usuario_hace_examen)
		End Get
	End Property
	
	Public ReadOnly Property examen() As System.Data.Linq.Table(Of examen)
		Get
			Return Me.GetTable(Of examen)
		End Get
	End Property
	
	Public ReadOnly Property pregunta() As System.Data.Linq.Table(Of pregunta)
		Get
			Return Me.GetTable(Of pregunta)
		End Get
	End Property
	
	Public ReadOnly Property respuesta() As System.Data.Linq.Table(Of respuesta)
		Get
			Return Me.GetTable(Of respuesta)
		End Get
	End Property
	
	Public ReadOnly Property usuario() As System.Data.Linq.Table(Of usuario)
		Get
			Return Me.GetTable(Of usuario)
		End Get
	End Property
	
	Public ReadOnly Property usuario_cursa_asignatura() As System.Data.Linq.Table(Of usuario_cursa_asignatura)
		Get
			Return Me.GetTable(Of usuario_cursa_asignatura)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.asignatura")>  _
Partial Public Class asignatura
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _clave_asignatura As String
	
	Private _nombre_asignatura As String
	
	Private _examen As EntitySet(Of examen)
	
	Private _usuario_cursa_asignatura As EntitySet(Of usuario_cursa_asignatura)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onclave_asignaturaChanging(value As String)
    End Sub
    Partial Private Sub Onclave_asignaturaChanged()
    End Sub
    Partial Private Sub Onnombre_asignaturaChanging(value As String)
    End Sub
    Partial Private Sub Onnombre_asignaturaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._examen = New EntitySet(Of examen)(AddressOf Me.attach_examen, AddressOf Me.detach_examen)
		Me._usuario_cursa_asignatura = New EntitySet(Of usuario_cursa_asignatura)(AddressOf Me.attach_usuario_cursa_asignatura, AddressOf Me.detach_usuario_cursa_asignatura)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clave_asignatura", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property clave_asignatura() As String
		Get
			Return Me._clave_asignatura
		End Get
		Set
			If (String.Equals(Me._clave_asignatura, value) = false) Then
				Me.Onclave_asignaturaChanging(value)
				Me.SendPropertyChanging
				Me._clave_asignatura = value
				Me.SendPropertyChanged("clave_asignatura")
				Me.Onclave_asignaturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre_asignatura", DbType:="NVarChar(300) NOT NULL", CanBeNull:=false)>  _
	Public Property nombre_asignatura() As String
		Get
			Return Me._nombre_asignatura
		End Get
		Set
			If (String.Equals(Me._nombre_asignatura, value) = false) Then
				Me.Onnombre_asignaturaChanging(value)
				Me.SendPropertyChanging
				Me._nombre_asignatura = value
				Me.SendPropertyChanged("nombre_asignatura")
				Me.Onnombre_asignaturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="asignatura_examen", Storage:="_examen", ThisKey:="clave_asignatura", OtherKey:="clave_asignatura")>  _
	Public Property examen() As EntitySet(Of examen)
		Get
			Return Me._examen
		End Get
		Set
			Me._examen.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="asignatura_usuario_cursa_asignatura", Storage:="_usuario_cursa_asignatura", ThisKey:="clave_asignatura", OtherKey:="clave_asignatura")>  _
	Public Property usuario_cursa_asignatura() As EntitySet(Of usuario_cursa_asignatura)
		Get
			Return Me._usuario_cursa_asignatura
		End Get
		Set
			Me._usuario_cursa_asignatura.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_examen(ByVal entity As examen)
		Me.SendPropertyChanging
		entity.asignatura = Me
	End Sub
	
	Private Sub detach_examen(ByVal entity As examen)
		Me.SendPropertyChanging
		entity.asignatura = Nothing
	End Sub
	
	Private Sub attach_usuario_cursa_asignatura(ByVal entity As usuario_cursa_asignatura)
		Me.SendPropertyChanging
		entity.asignatura = Me
	End Sub
	
	Private Sub detach_usuario_cursa_asignatura(ByVal entity As usuario_cursa_asignatura)
		Me.SendPropertyChanging
		entity.asignatura = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.usuario_hace_examen")>  _
Partial Public Class usuario_hace_examen
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _nombre_usuario As String
	
	Private _id_examen As Integer
	
	Private _nota_hace As System.Nullable(Of Integer)
	
	Private _examen As EntityRef(Of examen)
	
	Private _usuario As EntityRef(Of usuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onnombre_usuarioChanging(value As String)
    End Sub
    Partial Private Sub Onnombre_usuarioChanged()
    End Sub
    Partial Private Sub Onid_examenChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_examenChanged()
    End Sub
    Partial Private Sub Onnota_haceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onnota_haceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._examen = CType(Nothing, EntityRef(Of examen))
		Me._usuario = CType(Nothing, EntityRef(Of usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre_usuario", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property nombre_usuario() As String
		Get
			Return Me._nombre_usuario
		End Get
		Set
			If (String.Equals(Me._nombre_usuario, value) = false) Then
				If Me._usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onnombre_usuarioChanging(value)
				Me.SendPropertyChanging
				Me._nombre_usuario = value
				Me.SendPropertyChanged("nombre_usuario")
				Me.Onnombre_usuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_examen", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id_examen() As Integer
		Get
			Return Me._id_examen
		End Get
		Set
			If ((Me._id_examen = value)  _
						= false) Then
				If Me._examen.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_examenChanging(value)
				Me.SendPropertyChanging
				Me._id_examen = value
				Me.SendPropertyChanged("id_examen")
				Me.Onid_examenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nota_hace", DbType:="Int")>  _
	Public Property nota_hace() As System.Nullable(Of Integer)
		Get
			Return Me._nota_hace
		End Get
		Set
			If (Me._nota_hace.Equals(value) = false) Then
				Me.Onnota_haceChanging(value)
				Me.SendPropertyChanging
				Me._nota_hace = value
				Me.SendPropertyChanged("nota_hace")
				Me.Onnota_haceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="examen_usuario_hace_examen", Storage:="_examen", ThisKey:="id_examen", OtherKey:="id_examen", IsForeignKey:=true)>  _
	Public Property examen() As examen
		Get
			Return Me._examen.Entity
		End Get
		Set
			Dim previousValue As examen = Me._examen.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._examen.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._examen.Entity = Nothing
					previousValue.usuario_hace_examen.Remove(Me)
				End If
				Me._examen.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.usuario_hace_examen.Add(Me)
					Me._id_examen = value.id_examen
				Else
					Me._id_examen = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("examen")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="usuario_usuario_hace_examen", Storage:="_usuario", ThisKey:="nombre_usuario", OtherKey:="nombre_usuario", IsForeignKey:=true)>  _
	Public Property usuario() As usuario
		Get
			Return Me._usuario.Entity
		End Get
		Set
			Dim previousValue As usuario = Me._usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._usuario.Entity = Nothing
					previousValue.usuario_hace_examen.Remove(Me)
				End If
				Me._usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.usuario_hace_examen.Add(Me)
					Me._nombre_usuario = value.nombre_usuario
				Else
					Me._nombre_usuario = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("usuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.examen")>  _
Partial Public Class examen
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_examen As Integer
	
	Private _fecha_examen As Date
	
	Private _clave_asignatura As String
	
	Private _fecha_creacion As Date
	
	Private _nombre_examen As String
	
	Private _activar_examen As Boolean
	
	Private _usuario_hace_examen As EntitySet(Of usuario_hace_examen)
	
	Private _asignatura As EntityRef(Of asignatura)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_examenChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_examenChanged()
    End Sub
    Partial Private Sub Onfecha_examenChanging(value As Date)
    End Sub
    Partial Private Sub Onfecha_examenChanged()
    End Sub
    Partial Private Sub Onclave_asignaturaChanging(value As String)
    End Sub
    Partial Private Sub Onclave_asignaturaChanged()
    End Sub
    Partial Private Sub Onfecha_creacionChanging(value As Date)
    End Sub
    Partial Private Sub Onfecha_creacionChanged()
    End Sub
    Partial Private Sub Onnombre_examenChanging(value As String)
    End Sub
    Partial Private Sub Onnombre_examenChanged()
    End Sub
    Partial Private Sub Onactivar_examenChanging(value As Boolean)
    End Sub
    Partial Private Sub Onactivar_examenChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._usuario_hace_examen = New EntitySet(Of usuario_hace_examen)(AddressOf Me.attach_usuario_hace_examen, AddressOf Me.detach_usuario_hace_examen)
		Me._asignatura = CType(Nothing, EntityRef(Of asignatura))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_examen", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_examen() As Integer
		Get
			Return Me._id_examen
		End Get
		Set
			If ((Me._id_examen = value)  _
						= false) Then
				Me.Onid_examenChanging(value)
				Me.SendPropertyChanging
				Me._id_examen = value
				Me.SendPropertyChanged("id_examen")
				Me.Onid_examenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha_examen", DbType:="Date NOT NULL")>  _
	Public Property fecha_examen() As Date
		Get
			Return Me._fecha_examen
		End Get
		Set
			If ((Me._fecha_examen = value)  _
						= false) Then
				Me.Onfecha_examenChanging(value)
				Me.SendPropertyChanging
				Me._fecha_examen = value
				Me.SendPropertyChanged("fecha_examen")
				Me.Onfecha_examenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clave_asignatura", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property clave_asignatura() As String
		Get
			Return Me._clave_asignatura
		End Get
		Set
			If (String.Equals(Me._clave_asignatura, value) = false) Then
				If Me._asignatura.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onclave_asignaturaChanging(value)
				Me.SendPropertyChanging
				Me._clave_asignatura = value
				Me.SendPropertyChanged("clave_asignatura")
				Me.Onclave_asignaturaChanged
			End If
		End Set
	End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha_creacion", DbType:="Date NOT NULL", IsDbGenerated:=True)>
    Public Property fecha_creacion() As Date
		Get
			Return Me._fecha_creacion
		End Get
		Set
			If ((Me._fecha_creacion = value)  _
						= false) Then
				Me.Onfecha_creacionChanging(value)
				Me.SendPropertyChanging
				Me._fecha_creacion = value
				Me.SendPropertyChanged("fecha_creacion")
				Me.Onfecha_creacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre_examen", DbType:="NVarChar(300) NOT NULL", CanBeNull:=false)>  _
	Public Property nombre_examen() As String
		Get
			Return Me._nombre_examen
		End Get
		Set
			If (String.Equals(Me._nombre_examen, value) = false) Then
				Me.Onnombre_examenChanging(value)
				Me.SendPropertyChanging
				Me._nombre_examen = value
				Me.SendPropertyChanged("nombre_examen")
				Me.Onnombre_examenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_activar_examen", DbType:="Bit NOT NULL")>  _
	Public Property activar_examen() As Boolean
		Get
			Return Me._activar_examen
		End Get
		Set
			If ((Me._activar_examen = value)  _
						= false) Then
				Me.Onactivar_examenChanging(value)
				Me.SendPropertyChanging
				Me._activar_examen = value
				Me.SendPropertyChanged("activar_examen")
				Me.Onactivar_examenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="examen_usuario_hace_examen", Storage:="_usuario_hace_examen", ThisKey:="id_examen", OtherKey:="id_examen")>  _
	Public Property usuario_hace_examen() As EntitySet(Of usuario_hace_examen)
		Get
			Return Me._usuario_hace_examen
		End Get
		Set
			Me._usuario_hace_examen.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="asignatura_examen", Storage:="_asignatura", ThisKey:="clave_asignatura", OtherKey:="clave_asignatura", IsForeignKey:=true)>  _
	Public Property asignatura() As asignatura
		Get
			Return Me._asignatura.Entity
		End Get
		Set
			Dim previousValue As asignatura = Me._asignatura.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._asignatura.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._asignatura.Entity = Nothing
					previousValue.examen.Remove(Me)
				End If
				Me._asignatura.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.examen.Add(Me)
					Me._clave_asignatura = value.clave_asignatura
				Else
					Me._clave_asignatura = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("asignatura")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_usuario_hace_examen(ByVal entity As usuario_hace_examen)
		Me.SendPropertyChanging
		entity.examen = Me
	End Sub
	
	Private Sub detach_usuario_hace_examen(ByVal entity As usuario_hace_examen)
		Me.SendPropertyChanging
		entity.examen = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.pregunta")>  _
Partial Public Class pregunta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_examen As Integer
	
	Private _id_pregunta As Integer
	
	Private _texto_pregunta As String
	
	Private _fecha_pregunta As Date
	
	Private _nombre_usuario As String
	
	Private _validada As Boolean
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_examenChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_examenChanged()
    End Sub
    Partial Private Sub Onid_preguntaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_preguntaChanged()
    End Sub
    Partial Private Sub Ontexto_preguntaChanging(value As String)
    End Sub
    Partial Private Sub Ontexto_preguntaChanged()
    End Sub
    Partial Private Sub Onfecha_preguntaChanging(value As Date)
    End Sub
    Partial Private Sub Onfecha_preguntaChanged()
    End Sub
    Partial Private Sub Onnombre_usuarioChanging(value As String)
    End Sub
    Partial Private Sub Onnombre_usuarioChanged()
    End Sub
    Partial Private Sub OnvalidadaChanging(value As Boolean)
    End Sub
    Partial Private Sub OnvalidadaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_examen", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id_examen() As Integer
		Get
			Return Me._id_examen
		End Get
		Set
			If ((Me._id_examen = value)  _
						= false) Then
				Me.Onid_examenChanging(value)
				Me.SendPropertyChanging
				Me._id_examen = value
				Me.SendPropertyChanged("id_examen")
				Me.Onid_examenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_pregunta", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id_pregunta() As Integer
		Get
			Return Me._id_pregunta
		End Get
		Set
			If ((Me._id_pregunta = value)  _
						= false) Then
				Me.Onid_preguntaChanging(value)
				Me.SendPropertyChanging
				Me._id_pregunta = value
				Me.SendPropertyChanged("id_pregunta")
				Me.Onid_preguntaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_texto_pregunta", DbType:="NVarChar(300) NOT NULL", CanBeNull:=false)>  _
	Public Property texto_pregunta() As String
		Get
			Return Me._texto_pregunta
		End Get
		Set
			If (String.Equals(Me._texto_pregunta, value) = false) Then
				Me.Ontexto_preguntaChanging(value)
				Me.SendPropertyChanging
				Me._texto_pregunta = value
				Me.SendPropertyChanged("texto_pregunta")
				Me.Ontexto_preguntaChanged
			End If
		End Set
	End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha_pregunta", DbType:="Date NOT NULL", IsDbGenerated:=True)>
    Public Property fecha_pregunta() As Date
		Get
			Return Me._fecha_pregunta
		End Get
		Set
			If ((Me._fecha_pregunta = value)  _
						= false) Then
				Me.Onfecha_preguntaChanging(value)
				Me.SendPropertyChanging
				Me._fecha_pregunta = value
				Me.SendPropertyChanged("fecha_pregunta")
				Me.Onfecha_preguntaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre_usuario", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property nombre_usuario() As String
		Get
			Return Me._nombre_usuario
		End Get
		Set
			If (String.Equals(Me._nombre_usuario, value) = false) Then
				Me.Onnombre_usuarioChanging(value)
				Me.SendPropertyChanging
				Me._nombre_usuario = value
				Me.SendPropertyChanged("nombre_usuario")
				Me.Onnombre_usuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_validada", DbType:="Bit NOT NULL")>  _
	Public Property validada() As Boolean
		Get
			Return Me._validada
		End Get
		Set
			If ((Me._validada = value)  _
						= false) Then
				Me.OnvalidadaChanging(value)
				Me.SendPropertyChanging
				Me._validada = value
				Me.SendPropertyChanged("validada")
				Me.OnvalidadaChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.respuesta")>  _
Partial Public Class respuesta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_examen As Integer
	
	Private _id_pregunta As Integer
	
	Private _id_respuesta As Integer
	
	Private _texto_respuesta As String
	
	Private _correcta As Boolean
	
	Private _nombre_usuario As String
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_examenChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_examenChanged()
    End Sub
    Partial Private Sub Onid_preguntaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_preguntaChanged()
    End Sub
    Partial Private Sub Onid_respuestaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_respuestaChanged()
    End Sub
    Partial Private Sub Ontexto_respuestaChanging(value As String)
    End Sub
    Partial Private Sub Ontexto_respuestaChanged()
    End Sub
    Partial Private Sub OncorrectaChanging(value As Boolean)
    End Sub
    Partial Private Sub OncorrectaChanged()
    End Sub
    Partial Private Sub Onnombre_usuarioChanging(value As String)
    End Sub
    Partial Private Sub Onnombre_usuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_examen", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id_examen() As Integer
		Get
			Return Me._id_examen
		End Get
		Set
			If ((Me._id_examen = value)  _
						= false) Then
				Me.Onid_examenChanging(value)
				Me.SendPropertyChanging
				Me._id_examen = value
				Me.SendPropertyChanged("id_examen")
				Me.Onid_examenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_pregunta", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id_pregunta() As Integer
		Get
			Return Me._id_pregunta
		End Get
		Set
			If ((Me._id_pregunta = value)  _
						= false) Then
				Me.Onid_preguntaChanging(value)
				Me.SendPropertyChanging
				Me._id_pregunta = value
				Me.SendPropertyChanged("id_pregunta")
				Me.Onid_preguntaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_respuesta", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id_respuesta() As Integer
		Get
			Return Me._id_respuesta
		End Get
		Set
			If ((Me._id_respuesta = value)  _
						= false) Then
				Me.Onid_respuestaChanging(value)
				Me.SendPropertyChanging
				Me._id_respuesta = value
				Me.SendPropertyChanged("id_respuesta")
				Me.Onid_respuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_texto_respuesta", DbType:="NVarChar(300)")>  _
	Public Property texto_respuesta() As String
		Get
			Return Me._texto_respuesta
		End Get
		Set
			If (String.Equals(Me._texto_respuesta, value) = false) Then
				Me.Ontexto_respuestaChanging(value)
				Me.SendPropertyChanging
				Me._texto_respuesta = value
				Me.SendPropertyChanged("texto_respuesta")
				Me.Ontexto_respuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_correcta", DbType:="Bit NOT NULL")>  _
	Public Property correcta() As Boolean
		Get
			Return Me._correcta
		End Get
		Set
			If ((Me._correcta = value)  _
						= false) Then
				Me.OncorrectaChanging(value)
				Me.SendPropertyChanging
				Me._correcta = value
				Me.SendPropertyChanged("correcta")
				Me.OncorrectaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre_usuario", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property nombre_usuario() As String
		Get
			Return Me._nombre_usuario
		End Get
		Set
			If (String.Equals(Me._nombre_usuario, value) = false) Then
				Me.Onnombre_usuarioChanging(value)
				Me.SendPropertyChanging
				Me._nombre_usuario = value
				Me.SendPropertyChanged("nombre_usuario")
				Me.Onnombre_usuarioChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.usuario")>  _
Partial Public Class usuario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _nombre_usuario As String
	
	Private _password_usuario As String
	
	Private _tipo_usuario As String
	
	Private _usuario_hace_examen As EntitySet(Of usuario_hace_examen)
	
	Private _usuario_cursa_asignatura As EntitySet(Of usuario_cursa_asignatura)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onnombre_usuarioChanging(value As String)
    End Sub
    Partial Private Sub Onnombre_usuarioChanged()
    End Sub
    Partial Private Sub Onpassword_usuarioChanging(value As String)
    End Sub
    Partial Private Sub Onpassword_usuarioChanged()
    End Sub
    Partial Private Sub Ontipo_usuarioChanging(value As String)
    End Sub
    Partial Private Sub Ontipo_usuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._usuario_hace_examen = New EntitySet(Of usuario_hace_examen)(AddressOf Me.attach_usuario_hace_examen, AddressOf Me.detach_usuario_hace_examen)
		Me._usuario_cursa_asignatura = New EntitySet(Of usuario_cursa_asignatura)(AddressOf Me.attach_usuario_cursa_asignatura, AddressOf Me.detach_usuario_cursa_asignatura)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre_usuario", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property nombre_usuario() As String
		Get
			Return Me._nombre_usuario
		End Get
		Set
			If (String.Equals(Me._nombre_usuario, value) = false) Then
				Me.Onnombre_usuarioChanging(value)
				Me.SendPropertyChanging
				Me._nombre_usuario = value
				Me.SendPropertyChanged("nombre_usuario")
				Me.Onnombre_usuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_password_usuario", DbType:="NVarChar(300) NOT NULL", CanBeNull:=false)>  _
	Public Property password_usuario() As String
		Get
			Return Me._password_usuario
		End Get
		Set
			If (String.Equals(Me._password_usuario, value) = false) Then
				Me.Onpassword_usuarioChanging(value)
				Me.SendPropertyChanging
				Me._password_usuario = value
				Me.SendPropertyChanged("password_usuario")
				Me.Onpassword_usuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_usuario", DbType:="NVarChar(300) NOT NULL", CanBeNull:=false)>  _
	Public Property tipo_usuario() As String
		Get
			Return Me._tipo_usuario
		End Get
		Set
			If (String.Equals(Me._tipo_usuario, value) = false) Then
				Me.Ontipo_usuarioChanging(value)
				Me.SendPropertyChanging
				Me._tipo_usuario = value
				Me.SendPropertyChanged("tipo_usuario")
				Me.Ontipo_usuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="usuario_usuario_hace_examen", Storage:="_usuario_hace_examen", ThisKey:="nombre_usuario", OtherKey:="nombre_usuario")>  _
	Public Property usuario_hace_examen() As EntitySet(Of usuario_hace_examen)
		Get
			Return Me._usuario_hace_examen
		End Get
		Set
			Me._usuario_hace_examen.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="usuario_usuario_cursa_asignatura", Storage:="_usuario_cursa_asignatura", ThisKey:="nombre_usuario", OtherKey:="nombre_usuario")>  _
	Public Property usuario_cursa_asignatura() As EntitySet(Of usuario_cursa_asignatura)
		Get
			Return Me._usuario_cursa_asignatura
		End Get
		Set
			Me._usuario_cursa_asignatura.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_usuario_hace_examen(ByVal entity As usuario_hace_examen)
		Me.SendPropertyChanging
		entity.usuario = Me
	End Sub
	
	Private Sub detach_usuario_hace_examen(ByVal entity As usuario_hace_examen)
		Me.SendPropertyChanging
		entity.usuario = Nothing
	End Sub
	
	Private Sub attach_usuario_cursa_asignatura(ByVal entity As usuario_cursa_asignatura)
		Me.SendPropertyChanging
		entity.usuario = Me
	End Sub
	
	Private Sub detach_usuario_cursa_asignatura(ByVal entity As usuario_cursa_asignatura)
		Me.SendPropertyChanging
		entity.usuario = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.usuario_cursa_asignatura")>  _
Partial Public Class usuario_cursa_asignatura
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _clave_asignatura As String
	
	Private _nombre_usuario As String
	
	Private _asignatura As EntityRef(Of asignatura)
	
	Private _usuario As EntityRef(Of usuario)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onclave_asignaturaChanging(value As String)
    End Sub
    Partial Private Sub Onclave_asignaturaChanged()
    End Sub
    Partial Private Sub Onnombre_usuarioChanging(value As String)
    End Sub
    Partial Private Sub Onnombre_usuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._asignatura = CType(Nothing, EntityRef(Of asignatura))
		Me._usuario = CType(Nothing, EntityRef(Of usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clave_asignatura", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property clave_asignatura() As String
		Get
			Return Me._clave_asignatura
		End Get
		Set
			If (String.Equals(Me._clave_asignatura, value) = false) Then
				If Me._asignatura.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onclave_asignaturaChanging(value)
				Me.SendPropertyChanging
				Me._clave_asignatura = value
				Me.SendPropertyChanged("clave_asignatura")
				Me.Onclave_asignaturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre_usuario", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property nombre_usuario() As String
		Get
			Return Me._nombre_usuario
		End Get
		Set
			If (String.Equals(Me._nombre_usuario, value) = false) Then
				If Me._usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onnombre_usuarioChanging(value)
				Me.SendPropertyChanging
				Me._nombre_usuario = value
				Me.SendPropertyChanged("nombre_usuario")
				Me.Onnombre_usuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="asignatura_usuario_cursa_asignatura", Storage:="_asignatura", ThisKey:="clave_asignatura", OtherKey:="clave_asignatura", IsForeignKey:=true)>  _
	Public Property asignatura() As asignatura
		Get
			Return Me._asignatura.Entity
		End Get
		Set
			Dim previousValue As asignatura = Me._asignatura.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._asignatura.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._asignatura.Entity = Nothing
					previousValue.usuario_cursa_asignatura.Remove(Me)
				End If
				Me._asignatura.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.usuario_cursa_asignatura.Add(Me)
					Me._clave_asignatura = value.clave_asignatura
				Else
					Me._clave_asignatura = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("asignatura")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="usuario_usuario_cursa_asignatura", Storage:="_usuario", ThisKey:="nombre_usuario", OtherKey:="nombre_usuario", IsForeignKey:=true)>  _
	Public Property usuario() As usuario
		Get
			Return Me._usuario.Entity
		End Get
		Set
			Dim previousValue As usuario = Me._usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._usuario.Entity = Nothing
					previousValue.usuario_cursa_asignatura.Remove(Me)
				End If
				Me._usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.usuario_cursa_asignatura.Add(Me)
					Me._nombre_usuario = value.nombre_usuario
				Else
					Me._nombre_usuario = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("usuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
